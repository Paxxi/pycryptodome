cmake_minimum_required(VERSION 3.3)

project(pycryptodome VERSION 3.4.9 LANGUAGES C)

option(SEPARATE_NAMESPACE "Install as Cryptodome instead of Crypto" OFF)

set(NAMESPACE Crypto)
if(SEPARATE_NAMESPACE)
  set(NAMESPACE Cryptodome)
endif()

if(MSVC)
  set(CMAKE_DEBUG_POSTFIX "d")
endif()

find_package(python REQUIRED NO_MODULE)

include(CheckIncludeFile)

CHECK_INCLUDE_FILE(intrin.h HAVE_INTRIN_H)
CHECK_INCLUDE_FILE(cpuid.h HAVE_CPUID_H)

add_library(tomcrypt STATIC
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_hash.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_mac.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_macros.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_math.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_misc.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_pk.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_pkcs.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_prng.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_argchk.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_cfg.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_cipher.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_custom.h
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_des.c
)

target_include_directories(tomcrypt
  PRIVATE
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/libtom>
  PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/libtom>
)

# Hash functions
add_library(_MD2
  ${CMAKE_CURRENT_SOURCE_DIR}/src/MD2.c
)

add_library(_MD4
  ${CMAKE_CURRENT_SOURCE_DIR}/src/MD4.c
)

add_library(_SHA256
  ${CMAKE_CURRENT_SOURCE_DIR}/src/SHA256.c
)

add_library(_SHA224
  ${CMAKE_CURRENT_SOURCE_DIR}/src/SHA224.c
)

add_library(_SHA384
  ${CMAKE_CURRENT_SOURCE_DIR}/src/SHA384.c
)

add_library(_SHA512
  ${CMAKE_CURRENT_SOURCE_DIR}/src/SHA512.c
)

add_library(_RIPEMD160
  ${CMAKE_CURRENT_SOURCE_DIR}/src/RIPEMD160.c
)

add_library(_keccak
  ${CMAKE_CURRENT_SOURCE_DIR}/src/keccak.c
)

add_library(_BLAKE2b
  ${CMAKE_CURRENT_SOURCE_DIR}/src/blake2b.c
)

add_library(_BLAKE2s
  ${CMAKE_CURRENT_SOURCE_DIR}/src/blake2s.c
)

# Block encryption algorithms
add_library(_raw_aes
  ${CMAKE_CURRENT_SOURCE_DIR}/src/AES.c
)

if((CMAKE_VS_PLATFORM_TOOLSET EQUAL win32) OR (CMAKE_VS_PLATFORM_TOOLSET EQUAL X64))
add_library(_raw_aesni
  ${CMAKE_CURRENT_SOURCE_DIR}/src/AESNI.c
)
endif()

add_library(_raw_arc2
  ${CMAKE_CURRENT_SOURCE_DIR}/src/ARC2.c
)

add_library(_raw_blowfish
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Blowfish.c
)

add_library(_raw_cast
  ${CMAKE_CURRENT_SOURCE_DIR}/src/CAST.c
)

add_library(_raw_des
  ${CMAKE_CURRENT_SOURCE_DIR}/src/DES.c
)

add_library(_raw_des3
  ${CMAKE_CURRENT_SOURCE_DIR}/src/DES3.c
)

if((CMAKE_VS_PLATFORM_TOOLSET EQUAL win32) OR (CMAKE_VS_PLATFORM_TOOLSET EQUAL X64))
add_library(_cpuid
  ${CMAKE_CURRENT_SOURCE_DIR}/src/cpuid.c
)
endif()

# Chaining modes
add_library(_raw_ecb
  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_ecb.c
)

add_library(_raw_cbc
  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_cbc.c
)

add_library(_raw_cfb
  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_cfb.c
)

add_library(_raw_ofb
  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_ofb.c
)

add_library(_raw_ctr
  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_ctr.c
)

add_library(_raw_ocb
  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_ocb.c
)

# Stream ciphers
add_library(_ARC4
  ${CMAKE_CURRENT_SOURCE_DIR}/src/ARC4.c
)

add_library(_Salsa20
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Salsa20.c
)

add_library(_chacha20
  ${CMAKE_CURRENT_SOURCE_DIR}/src/chacha20.c
)

# Others
add_library(_scrypt
  ${CMAKE_CURRENT_SOURCE_DIR}/src/scrypt.c
)

# Utility modules
add_library(_strxor
  ${CMAKE_CURRENT_SOURCE_DIR}/src/strxor.c
)

set(CRYPTO_HASH
  _MD2
  _MD4
  _SHA256
  _SHA224
  _SHA384
  _SHA512
  _RIPEMD160
  _keccak
  _BLAKE2b
  _BLAKE2s
)
set(CRYPTO_CIPHER
  _raw_aes
  _raw_arc2
  _raw_blowfish
  _raw_cast
  _raw_des
  _raw_des3
  _raw_ecb
  _raw_cbc
  _raw_cfb
  _raw_ofb
  _raw_ctr
  _raw_ocb
  _ARC4
  _Salsa20
  _chacha20
)
set(CRYPTO_UTIL _strxor)
set(CRYPTO_PROTOCOL _scrypt)

if((CMAKE_VS_PLATFORM_TOOLSET EQUAL win32) OR (CMAKE_VS_PLATFORM_TOOLSET EQUAL X64))
  set(CRYPTO_CIPHER "${CRYPTO_CIPHER} _raw_aesni")
  set(CRYPTO_UTIL "${CRYPTO_UTIL} _cpuid")
endif()

foreach(CRYPTO_LIB IN LISTS CRYPTO_HASH CRYPTO_CIPHER CRYPTO_UTIL CRYPTO_PROTOCOL)
  target_compile_definitions(${CRYPTO_LIB}
    PRIVATE
      ARGTYPE=3
      HAVE_STDINT_H
  )

  if (HAVE_INTRIN_H)
    target_compile_definitions(${CRYPTO_LIB}
      PRIVATE
      HAVE_INTRIN_H
    )
  endif()

  if (HAVE_CPUID_H)
    target_compile_definitions(${CRYPTO_LIB}
      PRIVATE
      HAVE_CPUID_H
    )
  endif()

  target_sources(${CRYPTO_LIB}
    PRIVATE
      ${CMAKE_CURRENT_SOURCE_DIR}/src/common.h
      ${CMAKE_CURRENT_SOURCE_DIR}/src/errors.h
  )

  target_link_libraries(${CRYPTO_LIB}
    PRIVATE
      python::python
      tomcrypt
      $<$<CONFIG:Debug>:vccorlibd.lib>
      $<$<CONFIG:RelWithDebInfo>:vccorlib.lib>
      $<$<CONFIG:Debug>:msvcrtd.lib>
      $<$<CONFIG:RelWithDebInfo>:msvcrt.lib>
  )

  target_include_directories(${CRYPTO_LIB}
    PRIVATE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
  )

  set_target_properties(${CRYPTO_LIB}
    PROPERTIES
      SUFFIX ".pyd"
      PDB_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
      PDB_NAME ${CRYPTO_LIB}
  )

  if(${CRYPTO_LIB} IN_LIST CRYPTO_HASH)
    set(CRYPTO_INSTALL bin/Python/Lib/site-packages/${NAMESPACE}/Hash/)
  elseif(${CRYPTO_LIB} IN_LIST CRYPTO_CIPHER)
    set(CRYPTO_INSTALL bin/Python/Lib/site-packages/${NAMESPACE}/Cipher/)
  elseif(${CRYPTO_LIB} IN_LIST CRYPTO_UTIL)
    set(CRYPTO_INSTALL bin/Python/Lib/site-packages/${NAMESPACE}/Util/)
  else()
    set(CRYPTO_INSTALL bin/Python/Lib/site-packages/${NAMESPACE}/Protocol/)
  endif()

  target_link_options(${CRYPTO_LIB}
    PRIVATE
      /NODEFAULTLIB:vccorlibd
      /NODEFAULTLIB:msvcrtd
      /NODEFAULTLIB:vccorlib
      /NODEFAULTLIB:msvcrt
      /INCREMENTAL:NO
      /debug
  )

  install(TARGETS ${CRYPTO_LIB}
    RUNTIME DESTINATION ${CRYPTO_INSTALL}
  )
  install(FILES
    $<TARGET_PDB_FILE:${CRYPTO_LIB}>
    DESTINATION lib
  )
endforeach()

install(DIRECTORY
  ${CMAKE_CURRENT_SOURCE_DIR}/lib/Crypto/
  DESTINATION bin/Python/Lib/site-packages/${NAMESPACE}
  PATTERN SelfTest EXCLUDE
)

if(SEPARATE_NAMESPACE)
  install(CODE "file(GLOB_RECURSE PYMODULES ${CMAKE_INSTALL_PREFIX}/bin/Python/Lib/site-packages/${NAMESPACE}/*.py)")
  install(CODE "foreach(PYMODULE \${PYMODULES})
    file(READ \${PYMODULE} content)
    string(REPLACE \"Crypto.\" \"Cryptodome.\" content \"\${content}\")
    string(REPLACE \"Crypto \" \"Cryptodome \" content \"\${content}\")
    string(REPLACE \"'Crypto'\" \"'Cryptodome'\" content \"\${content}\")
    string(REPLACE \"\\\"Crypto\\\"\" \"\\\"Cryptodome\\\"\" content \"\${content}\")
    file(WRITE \${PYMODULE} \"\${content}\")
  endforeach()")
endif()
